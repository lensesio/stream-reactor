plugins {
    id 'com.gradleup.shadow' version '8.3.6'
    id 'com.diffplug.spotless' version "7.0.3"
    id 'java'
    id 'java-library'
}

allprojects {

    group = "io.lenses.streamreactor"
    description = "stream-reactor"

    def majorVersion = "9.0"
    def nextSnapshotVersion = "9.1"

    def githubRunId = System.getenv("GITHUB_RUN_ID")
    def versionEnv = System.getenv("VERSION")
    def snapshotTag = System.getenv("SNAPSHOT_TAG")

    version = (versionEnv && !versionEnv.isEmpty()) ? versionEnv :
            (githubRunId && !githubRunId.isEmpty()) ? "${majorVersion}.${githubRunId}" :
            (snapshotTag && !snapshotTag.isEmpty()) ? "${nextSnapshotVersion}-${snapshotTag}-SNAPSHOT" :
            "${nextSnapshotVersion}-SNAPSHOT"

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'com.gradleup.shadow'
    apply plugin: 'com.diffplug.spotless'

    java {
        setSourceCompatibility(JavaVersion.VERSION_11)
        setTargetCompatibility(JavaVersion.VERSION_11)
    }

    ext {
        //DEPENDENCY VERSIONS
        lombokVersion = '1.18.32'
        kafkaVersion = '3.9.1'
        logbackVersion = '1.4.14'
        jUnitVersion = '5.9.1'
        mockitoJupiterVersion = '5.10.0'
        apacheToConfluentVersionAxis = ["2.8.1": "6.2.2", "3.3.0": "7.3.1"]
        caffeineVersion = '3.1.8'
        cyclopsVersion = '10.4.1'
        bouncyCastleVersion = "1.78.1"

        //Other Manifest Info
        mainClassName = ''
        gitCommitHash = ("git rev-parse HEAD").execute().text.trim()
        gitTag = ("git describe --abbrev=0 --tags").execute().text.trim()
        gitRepo = ("git remote get-url origin").execute().text.trim()

        //for jar building
        rootRelease = "${project.rootDir}/release/"
        versionDir = "${rootRelease}/${project.description}-${project.version}"
        libsDir = "${rootRelease}/libs"
    }

    repositories {
        mavenCentral()
        maven {
            url "https://packages.confluent.io/maven/"
        }
    }

    dependencies {
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

        compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

        implementation group: 'com.oath.cyclops', name: 'cyclops', version: cyclopsVersion
        implementation group: 'com.oath.cyclops', name: 'cyclops-pure', version: cyclopsVersion

        testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoJupiterVersion
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoJupiterVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: jUnitVersion
        testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.3'
    }

    test {
        useJUnitPlatform()
        maxHeapSize = '1G'
        testLogging {
            events "passed"
        }
    }

    jar {
        manifest {
            attributes(
                    "StreamReactor-Version": project.version,
                    "Kafka-Version": kafkaVersion,
                    "Created-By": "Lenses",
                    "Created-At": new Date().format("YYYYMMDDHHmm"),
                    "Git-Repo": gitRepo,
                    "Git-Commit-Hash": gitCommitHash,
                    "Git-Tag": gitTag,
                    "StreamReactor-Docs": "https://docs.lenses.io/connectors/"
                    )
        }
    }

    shadowJar {
        def artifactVersion = gitTag?.trim() ? gitTag : project.version

        manifest {
            attributes("StreamReactor-Version": artifactVersion,
            "Kafka-Version": kafkaVersion,
            "Created-By": "Lenses",
            "Created-At": new Date().format("YYYYMMDDHHmm"),
            "Git-Repo": gitRepo,
            "Git-Commit-Hash": gitCommitHash,
            "Git-Tag": gitTag,
            "StreamReactor-Docs": "https://docs.lenses.io/connectors/"
            )
        }
        configurations = [
            project.configurations.compileClasspath
        ]
        archiveFileName = "${project.name}-${artifactVersion}-all.jar"
        zip64 true

        mergeServiceFiles {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }

        //shadowing antlr packages in order to avoid conflict when using kafka connect
        relocate('org.antlr', 'lshaded.antlr')

        dependencies {
            //            // UNCOMMENT BELOW IF NEED CLEAN JAR
            //            exclude(dependency {
            //                it.moduleGroup != 'io.lenses.streamreactor'
            //            })
            //        exclude(dependency('org.apache.logging.log4j:log4j-core:2.11.1'))
            //        exclude(dependency("org.apache.avro:.*"))
            //        exclude(dependency("org.apache.kafka:.*"))
            //        exclude(dependency("io.confluent:.*"))
            //        exclude(dependency("org.apache.kafka:.*"))
            //        exclude(dependency("org.apache.zookeeper:.*"))
            //        exclude(dependency("com.google.guava:guava:28.1-android"))
        }

        spotless {
            format 'misc', {
                target '.gitattributes', '.gitignore'
                trimTrailingWhitespace()
                leadingTabsToSpaces()
                endWithNewline()
            }
            groovyGradle {
                target '**/*.gradle'
                importOrder()
                trimTrailingWhitespace()
                removeSemicolons()
                greclipse()
                leadingTabsToSpaces(4)
            }
            java {
                targetExclude '**/io/lenses/kcql/antlr4/**/*.java'
                toggleOffOn()
                // optional: you can specify a specific version and/or config file
                eclipse('4.30').configFile("${rootDir}/config/Lenses_eclipse.xml")
                licenseHeaderFile(rootProject.file("HEADER.txt"))

                // courtesy of diffplug/spotless#240
                // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
                custom 'noWildcardImports', {
                    if (it.contains('.*;\n')) {
                        throw new Error('No wildcard imports allowed')
                    }
                }
                bumpThisNumberIfACustomStepChanges(1)
            }
        }
    }
    //compileJava.dependsOn("checkLicenses")

    task fatJar(dependsOn: [test, jar, shadowJar])

    task collectFatJar(type: Copy, dependsOn: [fatJar]) {
        from("${buildDir}/libs").include("kafka-connect-*-all.jar")
                .exclude("*-common-*").into(libsDir)
    }

    task collectDependencies(type: Copy) {
        from configurations.runtimeClasspath
        into "${libsDir}/${project.name}"
        exclude {
            it.file.name.contains('log4j-core') ||
                    it.file.name.startsWith('kafka-') ||
                    it.file.name.startsWith('zookeeper-')
        }
    }

    task copyModuleJar(type: Copy, dependsOn: jar) {
        from jar.archiveFile
        into "${libsDir}/${project.name}"
        rename { filename ->
            def artifactVersion = gitTag?.trim() ? gitTag : project.version
            "${project.name}-${artifactVersion}.jar"
        }
    }

    task collectArtifacts(dependsOn: [
        test,
        collectDependencies,
        copyModuleJar
    ])
}


task prepareReleaseRaw(dependsOn: subprojects.collectArtifacts)

task prepareRelease(dependsOn: [collectFatJar]) {
    dependsOn subprojects.collectFatJar
}

task testModuleList() {
    def nonTestModules = ["java-reactor"]
    def modulesFile = new File("gradle-test-modules.txt")
    modulesFile.delete()
    modulesFile.createNewFile()
    def modulesBuilder = new StringBuilder("[")
    allprojects.name.stream()
            .filter { moduleName -> !nonTestModules.contains(moduleName) }
            .forEach { moduleName -> modulesBuilder.append("\"" + moduleName + "\",") }
    modulesBuilder.deleteCharAt(modulesBuilder.lastIndexOf(",")).append("]")
    modulesFile.append(modulesBuilder)
}

task releaseModuleList() {
    def nonReleaseModules = [
        "java-reactor",
        "test-utils",
        "kafka-connect-cloud-common",
        "kafka-connect-common",
        "kafka-connect-gcp-common",
        "kafka-connect-query-language",
        "kafka-connect-sink-reporting"
    ]
    def modulesFile = new File("gradle-modules.txt")
    modulesFile.delete()
    modulesFile.createNewFile()
    def modulesBuilder = new StringBuilder("[")
    allprojects.name.stream()
            .filter { moduleName -> !nonReleaseModules.contains(moduleName) }
            .forEach { moduleName -> modulesBuilder.append("\"" + moduleName + "\",") }
    modulesBuilder.deleteCharAt(modulesBuilder.lastIndexOf(",")).append("]")
    modulesFile.append(modulesBuilder)
}

task prepareModuleList() {
    dependsOn testModuleList
    dependsOn releaseModuleList
}
